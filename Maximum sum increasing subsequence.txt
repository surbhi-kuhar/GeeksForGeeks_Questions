Given an array of n positive integers. Find the sum of the maximum sum subsequence of the given array such that the integers in the subsequence are sorted in strictly increasing order i.e. a strictly increasing subsequence. 

Example 1:

Input: N = 5, arr[] = {1, 101, 2, 3, 100} 
Output: 106
Explanation:The maximum sum of a
increasing sequence is obtained from
{1, 2, 3, 100}

Example 2:

Input: N = 3, arr[] = {1, 2, 3}
Output: 6
Explanation:The maximum sum of a
increasing sequence is obtained from
{1, 2, 3}


Approach :

Let us try to make a recursive approach first. 
We will start from 0th index and we can either include or exclude the element to consider all the cases.
When will we include an element ? 
When current element is greater than previous considered element then only we include the element in the sum.
For this, we need to keep a track previously taken element. 
Finally we return max(include,exclude)

Initially prev is taken as -1. We will always include the 0th index element without checking the condition because there is no previous for it.
And whenever we include any element we update prev with that index.

Recursive approach takes exponential time.

Doing it with memoization will require a 2D matrix. 

We will store the answers in a matrix so that we do not have to calculate it again and again.
